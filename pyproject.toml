[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "poptimizer/consts.py"
pattern = "__version__ = \"(?P<version>[0-9]+[.][0-9]+[.][0-9]+b[0-9]+)\""

[project]
name = "poptimizer"
dynamic = ["version"]
description = "Portfolio optimization"
readme = "README.md"
requires-python = ">=3.13,<3.14"
dependencies = [
    "aiohttp>=3.11.8",
    "pydantic>=2.11.1",
    "pydantic-settings>=2.7.1",
    "typer>=0.15.0",
    "uvloop>=0.20.0",
    "aiomoex>=2.1.2",
    "openpyxl>=3.1.5",
    "pandas>=2.2.2",
    "lxml>=5.3.0",
    "aiofiles>=24.1.0",
    "scipy>=1.15.0",
    "torch>=2.6.0",
    "tqdm>=4.66.5",
    "pymongo>=4.10.1",
    "reportlab>=4.3.1",
    "matplotlib>=3.10.1",
    "numpy>=2.2.3",
]

[dependency-groups]
dev = [
    "import-linter>=2.1",
    "pyright>=1.1.399",
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "ruff>=0.10.0",
    "pandas-stubs>=2.2.2.240807",
    "pytest-asyncio>=0.24.0",
    "lxml-stubs>=0.5.1",
]

[tool.pyright]
verboseOutput = true
pythonVersion = "3.12"
typeCheckingMode = "strict"
exclude = ["**/tests/*"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--cov-report=term-missing --setup-show --verbose"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = ["if __name__ == .__main__.:"]
omit = ["*/tests/*"]

[tool.ruff]
line-length = 120
fix = true

[tool.ruff.lint]
select = ["ALL"]
fixable = ["ALL"]

ignore = [
    "A003",     # Class attribute is shadowing a python builtin
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed
    "COM812",   # Missing-trailing-comma - ruff format recommendations
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "D107",     # Missing docstring in __init__ - prefer doc for class
    "D203",     # One-blank-line-before-class (D203) and no-blank-line-before-class (D211) are incompatible
    "D213",     # Multi-line-summary-first-line (D212) and multi-line-summary-second-line (D213) are incompatible
    "DTZ",      # The use of `datetime` without `tzinfo` argument is not allowed - one tz zone
    "EM101",    # Exception must not use a string literal, assign to variable first - don't like many exceptions
    "EM102",    # Exception must not use an f-string literal, assign to variable first - don't like many exceptions
    "ISC001",   # Single-line-implicit-string-concatenation - ruff format recommendations
    "RUF001",   # Ambiguous-unicode-character-string - russian
    "RUF002",   # Ambiguous-unicode-character-docstring - russian
    "RUF003",   # Ambiguous-unicode-character-comment - russian
    "TRY003",   # Avoid specifying long messages outside the exception class - don't like many exceptions
]

unfixable = [
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "ANN001",   # Missing type annotation for function argument
    "ANN201",   # Missing return type annotation for public function
    "S101",     # Use of `assert` detected
    "SLF001",   # Private member accessed
    "PLR2004",  # Magic value used in comparison
]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.field_validator", "pydantic.root_validator"]

[tool.importlinter]
root_package = "poptimizer"

[[tool.importlinter.contracts]]
name = "Layered"
type = "layers"
layers = [
    "poptimizer.controllers",
    "poptimizer.adapters",
    "poptimizer.use_cases",
    "poptimizer.domain",
]
