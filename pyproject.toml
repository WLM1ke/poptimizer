[project]
name = "poptimizer"
version = "3.0.0a"
description = "Portfolio optimization"
authors = [
    { name = "WLM1ke", email = "wlmike@gmail.com" }
]
dependencies = [
    "aiohttp>=3.9.0",
    "motor>=3.3.2",
    "pydantic>=2.5.1",
    "pydantic-settings>=2.1.0",
    "typer[all]>=0.9.0",
    "uvloop>=0.19.0",
    "aiomoex>=2.1.2",
]
readme = "README.md"
requires-python = ">= 3.12"

[project.urls]
repository = "https://github.com/WLM1ke/poptimizer"

[project.scripts]
poptimizer="poptimizer.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "import-linter>=1.12.1",
    "pyright>=1.1.337",
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.6",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.pyright]
verboseOutput = true
pythonVersion = "3.12"
typeCheckingMode = "strict"

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--cov-report=term-missing --setup-show --verbose"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = ["if __name__ == .__main__.:"]
omit = ["*/tests/*"]

[tool.ruff]
line-length = 120
select = ["ALL"]
fixable = ["ALL"]
fix = true

ignore = [
    "A003",     # Class attribute is shadowing a python builtin
    "ANN101",   # Missing-type-self
    "ANN102",   # Missing-type-cls
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed
    "COM812",   # Missing-trailing-comma - ruff format recommendations
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D103",     # Missing docstring in public function
    "D104",     # Missing docstring in public package
    "D105",     # Missing docstring in magic method
    "D107",     # Missing docstring in __init__ - prefer doc for class
    "D203",     # One-blank-line-before-class (D203) and no-blank-line-before-class (D211) are incompatible
    "D213",     # Multi-line-summary-first-line (D212) and multi-line-summary-second-line (D213) are incompatible
    "DTZ",      # The use of `datetime` without `tzinfo` argument is not allowed - one tz zone
    "EM101",    # Exception must not use a string literal, assign to variable first - don't like many exceptions
    "EM102",    # Exception must not use an f-string literal, assign to variable first - don't like many exceptions
    "ISC001",   # Single-line-implicit-string-concatenation - ruff format recommendations
    "RUF001",   # Ambiguous-unicode-character-string - russian
    "RUF002",   # Ambiguous-unicode-character-docstring - russian
    "RUF003",   # Ambiguous-unicode-character-comment - russian
    "TRY003",   # Avoid specifying long messages outside the exception class - don't like many exceptions
]

unfixable = [
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
]

[tool.ruff.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.pep8-naming]
classmethod-decorators = ["pydantic.field_validator", "pydantic.root_validator"]

[tool.importlinter]
root_package = "poptimizer"

[[tool.importlinter.contracts]]
name = "Layered"
type = "layers"
layers = [
    "poptimizer.cmd",
    "poptimizer.adapters",
    "poptimizer.io",
    "poptimizer.data",
    "poptimizer.core",
]
